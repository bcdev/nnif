/*////////////////////////////////////////////////////////////////////////////*/
/* File:        NnBase.h                                                      */
/* Purpose:     Basic interface def. file for all neural net modules          */
/*              Implemented in NnBase.c                                       */
/* Remarks:                                                                   */
/* Author:      Norman Fomferra (SCICON)                                      */
/*              Tel:   +49 4152 1457 (tel)                                    */
/*              Fax:   +49 4152 1455 (fax)                                    */
/*              Email: Norman.Fomferra@gkss.de                                */
/*////////////////////////////////////////////////////////////////////////////*/

#ifdef __cplusplus
extern "C" {
#endif

/* Define the current version of NNFF descibed in this header file */
#define NN_VERSION_MAJOR    1
#define NN_VERSION_MINOR    3

/* Define the overall floating point type for NNFF */
/* DO NOT CHANGE WITHOUT CHANGING THE NNFF VERSION NO. */
#define NN_FLOAT  double

/* Define the section header identifiers */
/* DO NOT CHANGE WITHOUT CHANGING THE NNFF VERSION NO. */
#define NN_NET_SECTION_ID      "NET\0"
#define NN_LAYER_SECTION_ID    "LAY\0"
#define NN_UNIT_SECTION_ID     "UNI\0"
#define NN_CONN_SECTION_ID     "CON\0"
#define NN_MATRIX_SECTION_ID   "MAT\0"

/**
 * String used to prefix error messages generated by this interface.
 * Introduced in version 1.2.
 */
#define NN_ERR_PREFIX "NNIF-error: "

/*////////////////////////////////////////////////////////////////////////////*/
/* Basic stuff                                                                */
/*////////////////////////////////////////////////////////////////////////////*/

/* If all time consuming assertations (the assert() macros) shall be removed */
/* define NDEBUG, which means, uncomment the following 3 lines              */
/* #ifndef NDEBUG                                                           */
/* 	#define NDEBUG                                                          */
/* #endif                                                                   */

/* The basic boolean type */
typedef int BOOL;
/* The boolean values */
#define TRUE   1
#define FALSE  0

/* Abbreviation for a pointer to a character string */
typedef char* PSTR;
/* Abbreviation for a pointer to a constant character string */
typedef const char* PCSTR;

/* Abbreviation for a pointer to a memory address */
typedef unsigned char* PMEM;
/* Abbreviation for a pointer to a constant memory address */
typedef const unsigned char* PCMEM;

/*////////////////////////////////////////////////////////////////////////////*/
/* Type:    NN_STATUS                                                         */
/* Purpose: Enumerates all valid error codes, including 'no error' (NN_OK)    */
/* Remarks: Return type of various interface functions.                       */
/*          Type of the global error code.                                    */
/*////////////////////////////////////////////////////////////////////////////*/

typedef enum
{
	NN_OK = 0,               /* All o.k., no error */
	NN_OUT_OF_MEMORY,        /* Out of memory     */
	NN_INVALID_ATTRIBUTE,    /* Invalid structure member found */
	NN_INVALID_SECTION_ID,   /* Invalid NNFF section ID found */
	NN_INVALID_SECTION_SIZE, /* Invalid NNFF section size found */
	NN_INCONSITENT_NET,      /* Inconsistencies found in neural net object */
	NN_INCOMPLETE_STRUCTURE, /* Neural net object structure is incomplete  */
	NN_CANT_OPEN_FILE,       /* A file can't be opened                     */
	NN_INVALID_FILE_FORMAT,  /* Unexpected file format found               */
	NN_FILE_READ_ERROR,      /* Error occured during file read operation   */
	NN_FILE_WRITE_ERROR      /* Error occured during file write operation  */
}
NN_STATUS;

/*////////////////////////////////////////////////////////////////////////////*/
/* Type:    NN_PREC                                                           */
/* Purpose: Enumerates all valid precision codes                              */
/*////////////////////////////////////////////////////////////////////////////*/

typedef enum 
{
	NN_PREC_SINGLE  = 4,
	NN_PREC_DOUBLE  = 8
} 
NN_PREC;

/*////////////////////////////////////////////////////////////////////////////*/
/* Type:    NN_FNID                                                           */
/* Purpose: Enumerates all valid function codes                               */
/*////////////////////////////////////////////////////////////////////////////*/

typedef enum
{
	NN_FUNC_UNDEFINED   = -1,
	NN_FUNC_ZERO        =  0,
	NN_FUNC_IDENTITY    =  1,
	NN_FUNC_THRESHOLD   = 10,
	NN_FUNC_LINEAR      = 11,
	NN_FUNC_SEMILINEAR  = 12,
	NN_FUNC_EXPONENTIAL = 13, /* Introduced in version 1.1 */
	NN_FUNC_LOGARITHMIC = 14, /* Introduced in version 1.1 */
	NN_FUNC_QUADRATIC   = 15, /* Introduced in version 1.2 */
	NN_FUNC_SIGMOID_1   = 20,
	NN_FUNC_SIGMOID_2   = 21,
	NN_FUNC_RBF_1       = 30,
	NN_FUNC_RBF_2       = 31,
	NN_FUNC_SUM_1       = 40,
	NN_FUNC_SUM_2       = 41
} 
NN_FNID;

/*////////////////////////////////////////////////////////////////////////////*/
/* Type:    NN_NET_ATTRIB                                                     */
/* Purpose: Structure for the neural net attributes.                          */
/*          The structure is a projection of the net section in an NNFF file. */
/* IMPORTANT: DO NOT CHANGE THE STRUCTURE WITHOUT CHANGING THE NNFF VERSION NO. */
/*            The symbol NN_NET_SECTION_SIZE must be set to the number of bytes */
/*            actually used by the valid structure members. This value is not   */
/*            necessarily equal to the size of NN_NET_ATTRIB. This is because of */
/*            the compilers structure alignment setting, which usually can be   */
/*            one of 2, 4, 8, or 16 bytes!                                      */
/*////////////////////////////////////////////////////////////////////////////  */

typedef struct SNnNetAttrib
{                               /* Siz Sum */
	short      anVersion[2];    /* [ 4][ 4] Major and minor NNFF version */
	short      nNumLayers;      /* [ 2][ 6] Number of layers            */
	short      iInpLayer;       /* [ 2][ 8] Index of the input layer    */
	short      iOutLayer;       /* [ 2][10] Index of the output layer   */
	short      nPrecision;      /* [ 2][12] Internal calculation precision */
	short      alignment_1[10]; /* [20][32] RESERVED                      */
	short      alignment_2[16]; /* [32][64] RESERVED                      */
}
NN_NET_ATTRIB;

#define NN_NET_SECTION_SIZE   (sizeof (NN_NET_ATTRIB))

/*////////////////////////////////////////////////////////////////////////////*/
/* Type:    NN_LAYER_ATTRIB                                                   */
/* Purpose: Structure for the layer attributes.                               */
/*          The structure is a projection of the layer section in an NNFF file. */
/* IMPORTANT: DO NOT CHANGE THE STRUCTURE WITHOUT CHANGING THE NNFF VERSION NO. */
/*            The symbol NN_LAYER_SECTION_SIZE must be set to the number of bytes */
/*            actually used by the valid structure members. This value is not     */
/*            necessarily equal to the size of NN_LAYER_ATTRIB. This is because of */
/*            the compilers structure alignment setting, which usually can be     */
/*            one of 2, 4, 8, or 16 bytes!                                        */
/*////////////////////////////////////////////////////////////////////////////    */

typedef struct SNnLayerAttrib
{                               /* Siz Sum */
	short      iLayer;          /* [ 2][ 2] Index of this layer within the net */
	short      nNumUnits;       /* [ 2][ 4] Number of units                   */
	short      nInpFnId;        /* [ 2][ 6] Input function identifier         */
	short      nActFnId;        /* [ 2][ 8] Activation function identifier    */
	short      nOutFnId;        /* [ 2][10] Output function identifier        */
	short      alignment_1[3];  /* [ 6][16] RESERVED                          */
	NN_FLOAT   fActSlope;       /* [ 8][24] Activation slope                  */
	NN_FLOAT   fActThres;       /* [ 8][32] Activation threshold              */
	NN_FLOAT   alignment_2[4];  /* [32][64] RESERVED                          */
}
NN_LAYER_ATTRIB;

#define NN_LAYER_SECTION_SIZE   (sizeof (NN_LAYER_ATTRIB))

/*////////////////////////////////////////////////////////////////////////////*/
/* Type:    NN_UNIT_ATTRIB                                                    */
/* Purpose: Structure for the unit attributes.                                */
/*          The structure is a projection of the unit section in an NNFF file. */
/* WARNING: DO NOT CHANGE THE STRUCTURE WITHOUT CHANGING THE NNFF VERSION NO.  */
/*          KEEP AN EYE ON THE CURRENTLY USED 8 BYTE STRUCTURE ALIGNMENT.      */
/*//////////////////////////////////////////////////////////////////////////// */

typedef struct SNnUnitAttrib
{                              /* Siz Sum */
	short     iLayer;          /* [ 2][ 2] Index of the layer that owns this unit */
	short     iUnit;           /* [ 2][ 4] Index of this unit within the layer   */
	short     nNumConns;       /* [ 2][ 6] Number of incoming connections        */
	short     bHasMatrix;      /* [ 2][ 8] If not zero, the unit has a matrix    */
	short     alignment_1[4];  /* [ 8][16] RESERVED                              */
	NN_FLOAT  fInpBias;        /* [ 8][24] Input bias                            */
	NN_FLOAT  fInpScale;       /* [ 8][32] Input scaling                         */
	NN_FLOAT  fOutBias;        /* [ 8][40] Output bias                           */
	NN_FLOAT  fOutScale;       /* [ 8][48] Output scaling                        */
	NN_FLOAT  alignment_2[2];  /* [16][64] RESERVED                              */
}
NN_UNIT_ATTRIB;

#define NN_UNIT_SECTION_SIZE   (sizeof (NN_UNIT_ATTRIB))

/*////////////////////////////////////////////////////////////////////////////*/
/* Type:    NN_CONN_ATTRIB                                                    */
/* Purpose: Structure for the connection attributes.                          */
/*          The structure is a projection of a connection entry in an NNFF file. */
/* WARNING: DO NOT CHANGE THE STRUCTURE WITHOUT CHANGING THE NNFF VERSION NO.    */
/*          KEEP AN EYE ON THE CURRENTLY USED 8 BYTE STRUCTURE ALIGNMENT.        */
/*////////////////////////////////////////////////////////////////////////////   */

typedef struct SNnConnAttrib
{                              /* Siz Sum */
	short    iLayer;           /* [ 2][ 2] Index of the source layer */
	short    iUnit;            /* [ 2][ 4] Index of the source unit  */
	short    alignment_1[2];   /* [ 4][ 8] RESERVED                  */
	NN_FLOAT fWeight;          /* [ 8][16] Connection weight or RBF centre point */
}
NN_CONN_ATTRIB;

#define NN_CONN_ENTRY_SIZE    (sizeof (NN_CONN_ATTRIB))
#define NN_MATRIX_ENTRY_SIZE  (sizeof (NN_FLOAT))  

/*////////////////////////////////////////////////////////////////////////////*/
/* Forward declarations:                                                      */
struct SNnNet;    /* The net structure                                        */
struct SNnLayer;  /* The layer structure                                      */
struct SNnUnit;   /* The unit structure                                       */
struct SNnConn;   /* The connection structure                                 */

/*////////////////////////////////////////////////////////////////////////////*/
/* Type abbreviations                                                         */
typedef struct SNnNet   *  NN_PNET;     /* Pointer to single net structure    */
typedef struct SNnLayer *  NN_PLAYER;   /* Pointer to single layer structure  */
typedef struct SNnLayer *  NN_ALAYERS;  /* Pointer to array of layer structures */
typedef struct SNnUnit  *  NN_PUNIT;    /* Pointer to single unit structure    */
typedef struct SNnUnit  *  NN_AUNITS;   /* Pointer to array of unit structures */
typedef struct SNnConn  *  NN_PCONN;    /* Pointer to single connection structure */
typedef struct SNnConn  *  NN_ACONNS;   /* Pointer to array of connection structures */

/*////////////////////////////////////////////////////////////////////////////*/
/* Type:    NN_NET                                                            */
/* Purpose: Structure to reproduce the neural net object in memory.           */
/*          Exclusively used as NN_PNET on the heap.                          */
/*////////////////////////////////////////////////////////////////////////////*/

typedef struct SNnNet
{
	NN_NET_ATTRIB    na;        /* Net attributes */
	NN_ALAYERS       aLayers;   /* Array of layer structures */
}
NN_NET;

/*////////////////////////////////////////////////////////////////////////////*/
/* Type:    NN_LAYER                                                          */
/* Purpose: Structure to reproduce the layer object in memory.                */
/*          Exclusively used as NN_ALAYERS and NN_PLAYER on the heap.         */
/*////////////////////////////////////////////////////////////////////////////*/

typedef struct SNnLayer
{
	NN_LAYER_ATTRIB  la;        /* Layer attributes */
	NN_AUNITS        aUnits;    /* Array of layer structures (DIM=nNumUnits) */
}
NN_LAYER;

/*////////////////////////////////////////////////////////////////////////////*/
/* Type:    NN_UNIT                                                           */
/* Purpose: Structure to reproduce the unit object in memory.                 */
/*          Exclusively used as NN_AUNITS and NN_PUNIT on the heap.           */
/*////////////////////////////////////////////////////////////////////////////*/

typedef struct SNnUnit
{
	NN_UNIT_ATTRIB   ua;        /* Unit attributes */
	NN_FLOAT         fInp;      /* Current input  */
	NN_FLOAT         fAct;      /* Current activation */
	NN_FLOAT         fOut;      /* Current output    */
	NN_ACONNS        aConns;    /* Array of connections (DIM=nNumConns) */
	NN_FLOAT **      ppfMatrix; /* Inverse co-variance matrix (DIM=nNumConns^2) */
}
NN_UNIT;

/*////////////////////////////////////////////////////////////////////////////*/
/* Type:    NN_CONN                                                           */
/* Purpose: Structure to reproduce the connection object in memory.           */
/*          Exclusively used as NN_ACONNS and NN_PCONN on the heap.           */
/*////////////////////////////////////////////////////////////////////////////*/

typedef struct SNnConn
{
	NN_CONN_ATTRIB   ca;        /* Connection attributes */
	NN_PUNIT         pUnit;     /* Source unit          */
}
NN_CONN;

/*////////////////////////////////////////////////////////////////////////////*/
/* Neural net object (NN_PNET) methods                                        */
/*////////////////////////////////////////////////////////////////////////////*/

/*////////////////////////////////////////////////////////////////////////////*/
/* Function: Nn_CreateNetFromMemFile                                          */
/* Purpose:  Reads a neural net object from a binary NNFF file.               */
/* Remarks:  If the neural net object has been successfully read from the     */
/*           memory, the function Nn_AssertSemanticIntegrity is called with   */
/*           the number of input and output units. The return value of        */
/*           Nn_AssertSemanticIntegrity is returned by Nn_CreateFromMemFile.  */
/*           The comparision of the number of input and output units can      */
/*           be supressed if passed each a -1.                                */
/* Returns:  NN_OK (or zero) for success, an error code otherwise             */
/*////////////////////////////////////////////////////////////////////////////*/

NN_STATUS Nn_CreateNetFromMemFile
(
	PCMEM    pMem,          /* Source memory block */
	size_t   nMemSize,      /* Size (in bytes) of the memory block */
	size_t*  pnBytesRead,   /* Number of bytes read (pointer can be NULL) */
	NN_PNET* ppNet,         /* The resulting neural net object           */
	int      nNumInpUnits,  /* Number of input units                     */
	int      nNumOutUnits   /* Number of output units                    */
);

/*////////////////////////////////////////////////////////////////////////////*/
/* Function:   Nn_CreateNet                                                   */
/* Purpose:    Creates an initialized neural net object                       */
/* Remarks:    The number of layers is set to 1 by default.                   */
/*             No layers are created.                                         */
/*             The default net attribute settings are:                        */
/*                 anVersion[0] = NN_VERSION_MAJOR                            */
/*                 anVersion[1] = NN_VERSION_MINOR                            */
/*                 nNumLayers   = 1                                           */
/*                 iInpLayer    = -1                                          */
/*                 iOutLayer    = -1                                          */
/*                 nPrecision   = NN_PREC_DOUBLE                              */
/* Returns:    NN_OK (or zero) for success, NN_OUT_OF_MEMORY otherwise        */
/*////////////////////////////////////////////////////////////////////////////*/

NN_STATUS Nn_CreateNet (NN_PNET* ppNet);

/*////////////////////////////////////////////////////////////////////////////*/
/* Function:   Nn_DeleteNet                                                   */
/* Purpose:    Releases all memory allocated by the neural net object         */
/* Remarks:    The function deletes also all layers, units and connections    */
/*             owned by the net object                                        */
/* Returns:    No return value                                                */
/*////////////////////////////////////////////////////////////////////////////*/

void Nn_DeleteNet (NN_PNET pNet);

/*////////////////////////////////////////////////////////////////////////////*/
/* Net methods concerning the layer objects (NN_PLAYER);                      */

/*////////////////////////////////////////////////////////////////////////////*/
/* Function: Nn_LayersCreated                                                 */
/* Purpose:  Checks whether the layers of a neural net object have been       */
/*           created or not                                                   */
/* Returns:  TRUE if the layers have been created, FALSE otherwise            */
/*////////////////////////////////////////////////////////////////////////////*/

BOOL Nn_LayersCreated (const NN_PNET pNet);

/*////////////////////////////////////////////////////////////////////////////*/
/* Function:   Nn_CreateLayers                                                */
/* Purpose:    Creates all layers of an initialized neural net object         */
/* Remarks:    The number of layers must previously have been set to a value  */
/*             greater or equal one.                                          */
/*             The input layer index is set to zero,                          */
/*             if it was not set before (-1)                                  */
/*             The output layer index is set to the number of layers minus one, */
/*             if it was not set before (-1)                                   */
/*             The default layer attribute settings are:                       */
/*                 iLayer    = <Current layer index in loop>                   */
/*                 nNumUnits = 1                                               */
/*                 nInpFnId  = NN_FUNC_SUM_1                                   */
/*                 nActFnId  = NN_FUNC_SIGMOID_1                               */
/*                 nOutFnId  = NN_FUNC_IDENTITY                                */
/*                 fActSlope = 1.0                                             */
/*                 fActThres = 0.0                                             */
/* Returns:    NN_OK (or zero) for success, NN_OUT_OF_MEMORY otherwise         */
/*//////////////////////////////////////////////////////////////////////////// */

NN_STATUS Nn_CreateLayers (NN_PNET pNet);

/*////////////////////////////////////////////////////////////////////////////*/
/* Function:   Nn_DeleteLayers                                                */
/* Purpose:    Releases all memory allocated by the layers of the neural      */
/*             net object                                                     */
/* Remarks:    The function deletes also all units and connections owned by   */
/*             the layers                                                     */
/* Returns:    No return value                                                */
/*////////////////////////////////////////////////////////////////////////////*/

void Nn_DeleteLayers (NN_PNET pNet);

/*////////////////////////////////////////////////////////////////////////////*/
/* Function:   Nn_GetLayerAt                                                  */
/* Purpose:    Gets the layer of the net at a given position                   */
/* Returns:    Layer object                                                   */
/*////////////////////////////////////////////////////////////////////////////*/

NN_PLAYER Nn_GetLayerAt(const NN_PNET pNet, int iL);

/*////////////////////////////////////////////////////////////////////////////*/
/* Function:   Nn_GetInputLayer                                               */
/* Purpose:    Gets the input layer of the net                                */
/* Returns:    Layer object                                                   */
/*////////////////////////////////////////////////////////////////////////////*/

NN_PLAYER Nn_GetInputLayer(const NN_PNET pNet);

/*////////////////////////////////////////////////////////////////////////////*/
/* Function:   Nn_GetOutputLayer                                               */
/* Purpose:    Gets the output layer of the net                                */
/* Returns:    Layer object                                                   */
/*////////////////////////////////////////////////////////////////////////////*/

NN_PLAYER Nn_GetOutputLayer(const NN_PNET pNet);

/*/////////////////////////////////////////////////////////////////////*/
/* Layer object (NN_PLAYER) methods                                    */
/*/////////////////////////////////////////////////////////////////////*/

/*////////////////////////////////////////////////////////////////////////////*/
/* Layer methods concerning the units (NN_PUNIT);                             */

/*////////////////////////////////////////////////////////////////////////////*/
/* Function: Nn_UnitsCreated                                                  */
/* Purpose:  Checks whether the units of a layer object have been             */
/*           created or not                                                   */
/* Returns:  TRUE if the units have been created, FALSE otherwise             */
/*////////////////////////////////////////////////////////////////////////////*/

BOOL Nn_UnitsCreated (const NN_PLAYER pLayer);

/*////////////////////////////////////////////////////////////////////////////*/
/* Function:   Nn_CreateUnits                                                 */
/* Purpose:    Creates all units of an initialized layer object               */
/* Remarks:    The number of units must previously have been set to a value   */
/*             greater or equal one.                                          */
/*             The default unit attribute settings are:                       */
/*                 iLayer    = <Current layer index in loop>                  */
/*                 iUnit     = <Current unit index in loop>                   */
/*                 nNumConns = 0                                              */
/*                 fInpBias  = 0.0                                            */
/*                 fInpScale = 1.0                                            */
/*                 fOutBias  = 0.0                                            */
/*                 fOutScale = 1.0                                            */
/* Returns:    NN_OK (or zero) for success, NN_OUT_OF_MEMORY otherwise        */
/*////////////////////////////////////////////////////////////////////////////*/

NN_STATUS Nn_CreateUnits (NN_PLAYER pLayer);

/*////////////////////////////////////////////////////////////////////////////*/
/* Function:   Nn_DeleteUnits                                                 */
/* Purpose:    Releases all memory allocated by the units of the layer object */
/* Remarks:    The function deletes also all connections and if present, the  */
/*             inverse co-variance matrix                                     */
/* Returns:    No return value                                                */
/*////////////////////////////////////////////////////////////////////////////*/

void Nn_DeleteUnits (NN_PLAYER pLayer);

/*////////////////////////////////////////////////////////////////////////////*/
/* Function:   Nn_GetUnitAt                                                   */
/* Purpose:    Get the unit of a layer at a given position                    */
/* Returns:    Unit object                                                    */
/*////////////////////////////////////////////////////////////////////////////*/

NN_PUNIT Nn_GetUnitAt(const NN_PLAYER pLayer, short iU);

/*/////////////////////////////////////////////////////////////////////*/
/* Unit object (NN_PUNIT) methods                                      */
/*/////////////////////////////////////////////////////////////////////*/

/*////////////////////////////////////////////////////////////////////////////*/
/* Unit methods concerning the connections (NN_PCONN);                        */

/*////////////////////////////////////////////////////////////////////////////*/
/* Function: Nn_ConnsCreated                                                  */
/* Purpose:  Checks whether the connections of a unithave been created or not */
/* Returns:  TRUE if the connections have been created, FALSE otherwise       */
/*////////////////////////////////////////////////////////////////////////////*/

BOOL Nn_ConnsCreated (const NN_PUNIT pUnit);

/*////////////////////////////////////////////////////////////////////////////*/
/* Function:   Nn_CreateConns                                                 */
/* Purpose:    Creates all connections of an initialized unit object          */
/* Remarks:    The number of connections must previously have been set to a value */
/*             greater or equal zero.                                             */
/*             The default connection attribute settings are:                     */
/*                 iLayer  = 0                                                    */
/*                 iUnit   = 0                                                    */
/*                 fWeight = 0.0                                                  */
/* Returns:    NN_OK (or zero) for success, NN_OUT_OF_MEMORY otherwise            */
/*////////////////////////////////////////////////////////////////////////////    */

NN_STATUS Nn_CreateConns (NN_PUNIT pUnit);

/*////////////////////////////////////////////////////////////////////////////*/
/* Function: Nn_DeleteConns                                                   */
/* Purpose:  Releases all memory allocated by the connections of the unit object */
/* Returns:  No return value                                                    */
/*////////////////////////////////////////////////////////////////////////////  */

void Nn_DeleteConns (NN_PUNIT pUnit);

/*////////////////////////////////////////////////////////////////////////////*/
/* Function: Nn_GetConnAt                                                     */
/* Purpose:  Get the incoming connection of a unit at a given position        */
/* Returns:  Connection object                                                */
/*////////////////////////////////////////////////////////////////////////////*/

NN_PCONN Nn_GetConnAt (const NN_PUNIT pUnit, short iC);

/*////////////////////////////////////////////////////////////////////////////*/
/* Function: Nn_SetConnAt                                                     */
/* Purpose:  Sets the incoming connection of a unit at a given position       */
/* Returns:  No return value                                                  */
/*////////////////////////////////////////////////////////////////////////////*/

void Nn_SetConnAt (NN_PUNIT pUnit, short iC, const NN_PCONN pConn);

/*////////////////////////////////////////////////////////////////////////////*/
/* Unit methods concerning the inverse co-variance matrix                     */

/*////////////////////////////////////////////////////////////////////////////*/
/* Function: Nn_MatrixCreated                                                 */
/* Purpose:  Checks whether the inverse co-variance matrix of a unit has been */
/*           created or not                                                   */
/* Returns:  TRUE if the matrix has been created, FALSE otherwise             */
/*////////////////////////////////////////////////////////////////////////////*/

BOOL Nn_MatrixCreated (const NN_PUNIT pUnit);

/*////////////////////////////////////////////////////////////////////////////*/
/* Function:   Nn_CreateMatrix                                                */
/* Purpose:    Creates the inverse co-variance matrix of an initialized unit object */
/* Remarks:    The number of connections must previously have been set to a value  */
/*             greater or equal zero. The size of the matrix will be the square of */
/*             the number of incoming connections.                                 */
/* Returns:    NN_OK (or zero) for success, NN_OUT_OF_MEMORY otherwise             */
/*////////////////////////////////////////////////////////////////////////////     */

NN_STATUS Nn_CreateMatrix (NN_PUNIT pUnit);

/*////////////////////////////////////////////////////////////////////////////*/
/* Function: Nn_DeleteMatrix                                                  */
/* Purpose:  Releases the memory allocated by the inverse co-variance matrix  */
/* Returns:  No return value                                                  */
/*////////////////////////////////////////////////////////////////////////////*/

void Nn_DeleteMatrix (NN_PUNIT pUnit);

/*////////////////////////////////////////////////////////////////////////////*/
/* Function: Nn_GetMatrix                                                     */
/* Purpose:  Gets the inverse co-variance matrix of a unit                    */
/* Returns:  The inverse co-variance matrix of a unit                         */
/*////////////////////////////////////////////////////////////////////////////*/

NN_FLOAT** Nn_GetMatrix (NN_PUNIT pUnit);

/*////////////////////////////////////////////////////////////////////////////*/
/* Function: Nn_GetMatrixRowAt                                                */
/* Purpose:  Gets a row of the inverse co-variance matrix of a unit at a given */
/*           position                                                         */
/* Returns:  A row of the inverse co-variance matrix                          */
/*////////////////////////////////////////////////////////////////////////////*/

NN_FLOAT* Nn_GetMatrixRowAt (NN_PUNIT pUnit, short iC);

/*////////////////////////////////////////////////////////////////////////////*/
/* Function: Nn_GetMatrixRowAt                                                */
/* Purpose:  Gets an element of the inverse co-variance matrix of a unit at a */
/*           given position                                                   */
/* Returns:  An element of the inverse co-variance matrix                     */
/*////////////////////////////////////////////////////////////////////////////*/

NN_FLOAT Nn_GetMatrixElemAt (const NN_PUNIT pUnit, short iCRow, short iCCol);

/*////////////////////////////////////////////////////////////////////////////*/
/* Function: Nn_GetMatrixRowAt                                                */
/* Purpose:  Sets an element of the inverse co-variance matrix of a unit at a */
/*           given position                                                   */
/* Returns:  No return value                                                  */
/*////////////////////////////////////////////////////////////////////////////*/

void Nn_SetMatrixElemAt (NN_PUNIT pUnit, short iCRow, short iCCol, NN_FLOAT fM);

/*/////////////////////////////////////////////////////////////////////*/
/* Output stream functions                                             */
/*/////////////////////////////////////////////////////////////////////*/

/*////////////////////////////////////////////////////////////////////////////*/
/* Function:   Nn_GetOutStream                                                */
/* Purpose:    Gets the global output stream for this module                  */
/* Returns:    Output stream                                                  */
/*////////////////////////////////////////////////////////////////////////////*/

FILE* Nn_GetOutStream ();

/*////////////////////////////////////////////////////////////////////////////*/
/* Function:   Nn_SetOutStream                                                */
/* Purpose:    Sets the global output stream for this module                  */
/* Returns:    No return value                                                */
/*////////////////////////////////////////////////////////////////////////////*/

void  Nn_SetOutStream (FILE* pOutStream);

/*////////////////////////////////////////////////////////////////////////////*/
/* Function:   Nn_Printf                                                      */
/* Purpose:    Behaves exactly as the printf function, but uses the global    */
/*             output stream of the module.                                   */
/* Returns:    No return value                                                */
/*////////////////////////////////////////////////////////////////////////////*/

void Nn_Printf (PCSTR pchFormat, ...);

/*/////////////////////////////////////////////////////////////////////*/
/* Error functions                                                     */
/*/////////////////////////////////////////////////////////////////////*/


/*////////////////////////////////////////////////////////////////////////////*/
/* Function:   Nn_GetErrNo                                                    */
/* Purpose:    Gets the error code of the last error                          */
/* Returns:    NN_OK if no error occured, an error code otherwise             */
/*////////////////////////////////////////////////////////////////////////////*/

NN_STATUS  Nn_GetErrNo ();

/*////////////////////////////////////////////////////////////////////////////*/
/* Function:   Nn_GetErrMsg                                                   */
/* Purpose:    Gets the message of the last error                             */
/* Returns:    Empty string if no error occured, otherwise an error message   */
/*////////////////////////////////////////////////////////////////////////////*/

PCSTR Nn_GetErrMsg ();

/*////////////////////////////////////////////////////////////////////////////*/
/* Function:   Nn_GetNumErrors                                                */
/* Purpose:    Gets the number of errors since the last call of Nn_ClearError */
/* Returns:    Number of errors since the last call of Nn_ClearError          */
/*////////////////////////////////////////////////////////////////////////////*/

int  Nn_GetNumErrors ();

/*////////////////////////////////////////////////////////////////////////////*/
/* Function:   Nn_ClearError                                                  */
/* Purpose:    Clears the last occured error                                  */
/* Remarks:    Sets the last error code to NN_OK,                             */
/*             sets the number of errors to zero,                             */
/*             clears the last error message                                  */
/* Returns:    No return value                                                */
/*////////////////////////////////////////////////////////////////////////////*/

void Nn_ClearError ();                

/*////////////////////////////////////////////////////////////////////////////*/
/* Function:   Nn_Error                                                       */
/* Purpose:    Sets an error                                                  */
/* Remarks:    Sets the last error code and message (used like printf);,      */
/*             increments the number of errors,                               */
/*             prints the message to the global output stream (if it is not NULL); */
/* Returns:    The error code that has been set                                   */
/*////////////////////////////////////////////////////////////////////////////    */

NN_STATUS Nn_Error (NN_STATUS nErrNo, PCSTR pchFormat, ...);

/*////////////////////////////////////////////////////////////////////////////*/
/* Function:   Nn_SetOutOfMemoryError                                         */
/* Purpose:    Sets the "Out of memory" error                                 */
/* Returns:    NN_OUT_OF_MEMORY                                               */
/*////////////////////////////////////////////////////////////////////////////*/

NN_STATUS Nn_SetOutOfMemoryError ();

/*////////////////////////////////////////////////////////////////////////////*/
/* Function: Nn_SetFileWriteError                                             */
/* Purpose:  Sets the global error code to NN_FILE_WRITE_ERROR and displays   */
/*           a corresponding message.                                         */
/* Returns:  NN_FILE_WRITE_ERROR                                              */
/*////////////////////////////////////////////////////////////////////////////*/

NN_STATUS Nn_SetFileWriteError ();

/*////////////////////////////////////////////////////////////////////////////*/
/* Function: Nn_SetFileReadError                                              */
/* Purpose:  Sets the global error code to NN_FILE_READ_ERROR and displays    */
/*           a corresponding message.                                         */
/* Returns:  NN_FILE_READ_ERROR                                               */
/*////////////////////////////////////////////////////////////////////////////*/

NN_STATUS Nn_SetFileReadError ();

/*////////////////////////////////////////////////////////////////////////////*/
/* Function: Nn_SetInvalidSectionIDError                                      */
/* Purpose:  Sets the global error code to NN_INVALID_SECTION_ID and displays */
/*           a corresponding message.                                         */
/* Returns:  NN_INVALID_SECTION_ID                                            */
/*////////////////////////////////////////////////////////////////////////////*/

NN_STATUS Nn_SetInvalidSectionIDError ();

/*////////////////////////////////////////////////////////////////////////////*/
/* Function: Nn_SetInvalidSectionSizeError                                    */
/* Purpose:  Sets the global error code to NN_INVALID_SECTION_SIZE and displays */
/*           a corresponding message.                                          */
/* Returns:  NN_INVALID_SECTION_SIZE                                           */
/*//////////////////////////////////////////////////////////////////////////// */

NN_STATUS Nn_SetInvalidSectionSizeError ();

#ifdef __cplusplus
}
#endif
/* EOF ///////////////////////////////////////////////////////////////////////*/
